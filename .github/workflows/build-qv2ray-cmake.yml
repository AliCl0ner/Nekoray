name: Nekoray build matrix - cmake

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag'
        required: true
      publish:
        description: 'Publish: If want ignore'
        required: false
      artifact-pack:
        description: 'artifact-pack: If want ignore'
        required: false

jobs:
  build-go:
    strategy:
      matrix:
        cross_os: [ windows, linux ]
        cross_arch: [ amd64 ]
        include:
          - cross_os: public_res
            cross_arch: public_res
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4
      - name: Go Status
        run: git ls-files go | xargs cat | sha1sum > go_status
      - name: Cache Common Download
        id: cache-common
        uses: actions/cache@v4
        with:
          path: artifacts.tgz
          key: CommonCache-${{ matrix.cross_os }}-${{ matrix.cross_arch }}-${{ hashFiles('libs/*.sh', 'go_status', '*.txt') }}
      - name: Install Golang
        if: steps.cache-common.outputs.cache-hit != 'true'
        uses: actions/setup-go@v4
        with:
          go-version: ^1.22
      - name: Build golang parts
        if: steps.cache-common.outputs.cache-hit != 'true'
        shell: bash
        run: |
          [ "${{ matrix.cross_os }}" == "public_res" ] || ./libs/get_source.sh
          [ "${{ matrix.cross_os }}" == "public_res" ] || GOOS=${{ matrix.cross_os }} GOARCH=${{ matrix.cross_arch }} ./libs/build_go.sh
          [ "${{ matrix.cross_os }}" == "public_res" ] || exit 0
          ./libs/build_public_res.sh
      - name: Tar files
        if: steps.cache-common.outputs.cache-hit != 'true'
        run: tar czvf artifacts.tgz ./deployment
      - name: Uploading Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NekoRay-${{ github.sha }}-Common-${{ matrix.cross_os }}-${{ matrix.cross_arch }}
          path: artifacts.tgz
  
  build-cpp:
    strategy:
      matrix:
        include:
          - platform: windows-2022
            arch: x64
            qt_version: "6.5"
          - platform: ubuntu-20.04
            arch: x64
            qt_version: "5.12"
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-2022'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Install ninja-build tool
        uses: seanmiddleditch/gha-setup-ninja@v3
      - name: Cache Download
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: libs/deps
          key: DepsCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ hashFiles('libs/build_deps_*.sh') }}-Qt${{ matrix.qt_version }}
      - name: Build Dependencies
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && matrix.platform != 'ubuntu-20.04'
        run: ./libs/build_deps_all.sh
      - name: Build Dependencies (Docker)
        shell: bash
        if: steps.cache-deps.outputs.cache-hit != 'true' && matrix.platform == 'ubuntu-20.04'
        run: |
          docker run --rm \
            -v $PWD:/nekoray \
            -w /nekoray \
            ghcr.io/matsuridayo/debian10-qt5:20230131 \
            bash -c "./libs/build_deps_all.sh"
      - name: Tar files
        shell: bash
        run: tar czvf artifacts.tgz ./deployment
      - name: Uploading Artifact
        uses: actions/upload-artifact@v4
        with:
          name: NekoRay-${{ github.sha }}-${{ matrix.platform }}-${{ matrix.arch }}-Qt${{ matrix.qt_version }}
          path: artifacts.tgz

  publish:
    name: Pack & Publish Release
    if: github.event.inputs.artifact-pack != 'y'
    runs-on: ubuntu-latest
    needs:
      - build-cpp
      - build-go
    steps:
      - name: Checking out sources
        uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: download-artifact
      - name: Pack
        run: |
          source libs/env_deploy.sh
          find . -name artifacts.tgz | xargs -n1 tar xvzf
          cd deployment
          cp -r public_res/* linux64
          cp -r public_res/* windows64
          rm -rf public_res *.pdb
          mv linux64 nekoray
          zip -r $version_standalone-linux64.zip nekoray
          mv windows64 nekoray
          zip -r $version_standalone-windows64.zip nekoray
      - name: Uploading Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Deployment-${{ github.sha }}
          path: deployment
      - name: Release
        if: github.event.inputs.publish != 'y'
        run: |
          ./ghr -delete -t "${{ secrets.GITHUB_TOKEN }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" deployment
